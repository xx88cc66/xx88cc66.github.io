<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on kenny博客</title><link>https://xx88cc66.github.io/post/</link><description>Recent content in Posts on kenny博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>kenny博客</copyright><atom:link href="https://xx88cc66.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>一次js逆向加解密实战</title><link>https://xx88cc66.github.io/p/%E4%B8%80%E6%AC%A1js%E9%80%86%E5%90%91%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AE%9E%E6%88%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xx88cc66.github.io/p/%E4%B8%80%E6%AC%A1js%E9%80%86%E5%90%91%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AE%9E%E6%88%98/</guid><description>&lt;h3 id="在挖edu的时候发现一个响应的密文">在挖edu的时候发现一个响应的密文
&lt;/h3>&lt;p>&lt;img src="https://xx88cc66.github.io/images/js/1.png"
loading="lazy"
>
由于密文在响应没有能搜索的关键key 也不想一个个去翻请求堆栈 所以直接搜索了&lt;/p>
&lt;p>decrypt( 带个翻阅了一下发现如下
&lt;img src="https://xx88cc66.github.io/images/js/2.png"
loading="lazy"
>
断点调试了一下一眼aes发现这个t就是我们的密文（秒了）&lt;/p>
&lt;p>f是key iv是m 直接控制台打印了对应的值&lt;/p>
&lt;p>&lt;img src="https://xx88cc66.github.io/images/js/3.png"
loading="lazy"
>
最后写个小脚本 也是出了不少明感信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="n">CryptoJS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;crypto-js&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;密文值&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CryptoJS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">enc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Utf8&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Dt8j9wGw%6HbxfFn&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CryptoJS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">enc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Utf8&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;0123456789ABCDEF&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">function&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CryptoJS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">enc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Hex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CryptoJS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">enc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Base64&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CryptoJS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">AES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">iv&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mode&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">CryptoJS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CBC&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">CryptoJS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pad&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Pkcs7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CryptoJS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">enc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Utf8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">console&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>一次对springboot shiro框架实战</title><link>https://xx88cc66.github.io/p/%E4%B8%80%E6%AC%A1%E5%AF%B9springboot-shiro%E6%A1%86%E6%9E%B6%E5%AE%9E%E6%88%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xx88cc66.github.io/p/%E4%B8%80%E6%AC%A1%E5%AF%B9springboot-shiro%E6%A1%86%E6%9E%B6%E5%AE%9E%E6%88%98/</guid><description>&lt;h3 id="0x00-开局一个ip">0x00 开局一个ip
&lt;/h3>&lt;p>信息收集一下 发现是springboot框架
&lt;img src="https://xx88cc66.github.io/images/shiro/1.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="0x01-漏洞利用">0x01 漏洞利用
&lt;/h3>&lt;p>直接上工具 发现发现存在heapdemp
&lt;img src="https://xx88cc66.github.io/images/shiro/2.png"
loading="lazy"
>
下载heapdump 并且解密发现shiro key 加密方式为aes
&lt;img src="https://xx88cc66.github.io/images/shiro/3.png"
loading="lazy"
>
验证一下密钥 发现是正确的
&lt;img src="https://xx88cc66.github.io/images/shiro/4.png"
loading="lazy"
>
爆破一下利用链
&lt;img src="https://xx88cc66.github.io/images/shiro/5.png"
loading="lazy"
>
发现成功执行命令
&lt;img src="https://xx88cc66.github.io/images/shiro/6.png"
loading="lazy"
>
直接注入内存马
&lt;img src="https://xx88cc66.github.io/images/shiro/7.png"
loading="lazy"
>
冰蝎连接一下 最后直接上线vshell
&lt;img src="https://xx88cc66.github.io/images/shiro/8.png"
loading="lazy"
>
拿下服务器
&lt;img src="https://xx88cc66.github.io/images/shiro/9.png"
loading="lazy"
>&lt;/p></description></item><item><title>一次渗透测试实战</title><link>https://xx88cc66.github.io/p/%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xx88cc66.github.io/p/%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98/</guid><description>&lt;h3 id="0x00-开局一个ip">0x00 开局一个ip
&lt;/h3>&lt;p>发现是空白页Tscanplues
做下信息收集扫描一下端口还有指纹
&lt;img src="https://xx88cc66.github.io/images/neiwang/1.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="0x01-信息收集">0x01 信息收集
&lt;/h3>&lt;p>发现端口7001
并且带有熟悉的指纹weblogic
&lt;img src="https://xx88cc66.github.io/images/neiwang/2.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="0x02-漏洞利用">0x02 漏洞利用
&lt;/h3>&lt;p>直接打一波weblogic nday 通过poc探测发现存在历史漏洞
&lt;img src="https://xx88cc66.github.io/images/neiwang/3.png"
loading="lazy"
>
执行一下命令
&lt;img src="https://xx88cc66.github.io/images/neiwang/4.png"
loading="lazy"
>
发现成功执行但是估计是个很普通的用户&lt;/p>
&lt;h3 id="0x03-上线cs">0x03 上线cs
&lt;/h3>&lt;p>tasklist查看一下进程看看有没有杀软
&lt;img src="https://xx88cc66.github.io/images/neiwang/9.png"
loading="lazy"
>
&lt;img src="https://xx88cc66.github.io/images/neiwang/10.png"
loading="lazy"
>
发现没有任何杀软进程
直接生成一个powershell执行即可 注意这里是32位的不然会上线失败
&lt;img src="https://xx88cc66.github.io/images/neiwang/6.png"
loading="lazy"
>
&lt;img src="https://xx88cc66.github.io/images/neiwang/7.png"
loading="lazy"
>
&lt;img src="https://xx88cc66.github.io/images/neiwang/8.png"
loading="lazy"
>
但是用户权限及其低&lt;/p>
&lt;h3 id="0x04-提权">0x04 提权
&lt;/h3>&lt;p>systeminfo查看一下服务器信息 发现是windows2008的系统
&lt;img src="https://xx88cc66.github.io/images/neiwang/5.png"
loading="lazy"
>
复制syesteminfo补丁信息 取搜索发现有很多可执行提权的历史漏洞
&lt;img src="https://xx88cc66.github.io/images/neiwang/11.png"
loading="lazy"
>
&lt;img src="https://xx88cc66.github.io/images/neiwang/12.png"
loading="lazy"
>
那么这里直接使用ms14-058进行提权直接用插件即可
&lt;img src="https://xx88cc66.github.io/images/neiwang/13.png"
loading="lazy"
>
ok 直接system权限
&lt;img src="https://xx88cc66.github.io/images/neiwang/14.png"
loading="lazy"
>&lt;/p></description></item></channel></rss>